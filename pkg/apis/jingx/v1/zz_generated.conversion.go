//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	unsafe "unsafe"

	jingx "github.com/kzz45/neverdown/pkg/apis/jingx"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*DockerImage)(nil), (*jingx.DockerImage)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DockerImage_To_jingx_DockerImage(a.(*DockerImage), b.(*jingx.DockerImage), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.DockerImage)(nil), (*DockerImage)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_DockerImage_To_v1_DockerImage(a.(*jingx.DockerImage), b.(*DockerImage), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Event)(nil), (*jingx.Event)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Event_To_jingx_Event(a.(*Event), b.(*jingx.Event), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.Event)(nil), (*Event)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_Event_To_v1_Event(a.(*jingx.Event), b.(*Event), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*EventList)(nil), (*jingx.EventList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_EventList_To_jingx_EventList(a.(*EventList), b.(*jingx.EventList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.EventList)(nil), (*EventList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_EventList_To_v1_EventList(a.(*jingx.EventList), b.(*EventList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*EventSpec)(nil), (*jingx.EventSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_EventSpec_To_jingx_EventSpec(a.(*EventSpec), b.(*jingx.EventSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.EventSpec)(nil), (*EventSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_EventSpec_To_v1_EventSpec(a.(*jingx.EventSpec), b.(*EventSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GitReference)(nil), (*jingx.GitReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_GitReference_To_jingx_GitReference(a.(*GitReference), b.(*jingx.GitReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.GitReference)(nil), (*GitReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_GitReference_To_v1_GitReference(a.(*jingx.GitReference), b.(*GitReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Project)(nil), (*jingx.Project)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Project_To_jingx_Project(a.(*Project), b.(*jingx.Project), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.Project)(nil), (*Project)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_Project_To_v1_Project(a.(*jingx.Project), b.(*Project), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ProjectList)(nil), (*jingx.ProjectList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ProjectList_To_jingx_ProjectList(a.(*ProjectList), b.(*jingx.ProjectList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.ProjectList)(nil), (*ProjectList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_ProjectList_To_v1_ProjectList(a.(*jingx.ProjectList), b.(*ProjectList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ProjectSpec)(nil), (*jingx.ProjectSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ProjectSpec_To_jingx_ProjectSpec(a.(*ProjectSpec), b.(*jingx.ProjectSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.ProjectSpec)(nil), (*ProjectSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_ProjectSpec_To_v1_ProjectSpec(a.(*jingx.ProjectSpec), b.(*ProjectSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Repository)(nil), (*jingx.Repository)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Repository_To_jingx_Repository(a.(*Repository), b.(*jingx.Repository), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.Repository)(nil), (*Repository)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_Repository_To_v1_Repository(a.(*jingx.Repository), b.(*Repository), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RepositoryList)(nil), (*jingx.RepositoryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_RepositoryList_To_jingx_RepositoryList(a.(*RepositoryList), b.(*jingx.RepositoryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.RepositoryList)(nil), (*RepositoryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_RepositoryList_To_v1_RepositoryList(a.(*jingx.RepositoryList), b.(*RepositoryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RepositoryMeta)(nil), (*jingx.RepositoryMeta)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_RepositoryMeta_To_jingx_RepositoryMeta(a.(*RepositoryMeta), b.(*jingx.RepositoryMeta), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.RepositoryMeta)(nil), (*RepositoryMeta)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_RepositoryMeta_To_v1_RepositoryMeta(a.(*jingx.RepositoryMeta), b.(*RepositoryMeta), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RepositorySpec)(nil), (*jingx.RepositorySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_RepositorySpec_To_jingx_RepositorySpec(a.(*RepositorySpec), b.(*jingx.RepositorySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.RepositorySpec)(nil), (*RepositorySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_RepositorySpec_To_v1_RepositorySpec(a.(*jingx.RepositorySpec), b.(*RepositorySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Tag)(nil), (*jingx.Tag)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Tag_To_jingx_Tag(a.(*Tag), b.(*jingx.Tag), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.Tag)(nil), (*Tag)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_Tag_To_v1_Tag(a.(*jingx.Tag), b.(*Tag), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TagList)(nil), (*jingx.TagList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TagList_To_jingx_TagList(a.(*TagList), b.(*jingx.TagList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.TagList)(nil), (*TagList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_TagList_To_v1_TagList(a.(*jingx.TagList), b.(*TagList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TagSpec)(nil), (*jingx.TagSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TagSpec_To_jingx_TagSpec(a.(*TagSpec), b.(*jingx.TagSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*jingx.TagSpec)(nil), (*TagSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_jingx_TagSpec_To_v1_TagSpec(a.(*jingx.TagSpec), b.(*TagSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_DockerImage_To_jingx_DockerImage(in *DockerImage, out *jingx.DockerImage, s conversion.Scope) error {
	out.Sha256 = in.Sha256
	out.Author = in.Author
	out.LastModifiedTime = in.LastModifiedTime
	return nil
}

// Convert_v1_DockerImage_To_jingx_DockerImage is an autogenerated conversion function.
func Convert_v1_DockerImage_To_jingx_DockerImage(in *DockerImage, out *jingx.DockerImage, s conversion.Scope) error {
	return autoConvert_v1_DockerImage_To_jingx_DockerImage(in, out, s)
}

func autoConvert_jingx_DockerImage_To_v1_DockerImage(in *jingx.DockerImage, out *DockerImage, s conversion.Scope) error {
	out.Sha256 = in.Sha256
	out.Author = in.Author
	out.LastModifiedTime = in.LastModifiedTime
	return nil
}

// Convert_jingx_DockerImage_To_v1_DockerImage is an autogenerated conversion function.
func Convert_jingx_DockerImage_To_v1_DockerImage(in *jingx.DockerImage, out *DockerImage, s conversion.Scope) error {
	return autoConvert_jingx_DockerImage_To_v1_DockerImage(in, out, s)
}

func autoConvert_v1_Event_To_jingx_Event(in *Event, out *jingx.Event, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_EventSpec_To_jingx_EventSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Event_To_jingx_Event is an autogenerated conversion function.
func Convert_v1_Event_To_jingx_Event(in *Event, out *jingx.Event, s conversion.Scope) error {
	return autoConvert_v1_Event_To_jingx_Event(in, out, s)
}

func autoConvert_jingx_Event_To_v1_Event(in *jingx.Event, out *Event, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_jingx_EventSpec_To_v1_EventSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_jingx_Event_To_v1_Event is an autogenerated conversion function.
func Convert_jingx_Event_To_v1_Event(in *jingx.Event, out *Event, s conversion.Scope) error {
	return autoConvert_jingx_Event_To_v1_Event(in, out, s)
}

func autoConvert_v1_EventList_To_jingx_EventList(in *EventList, out *jingx.EventList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]jingx.Event)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_EventList_To_jingx_EventList is an autogenerated conversion function.
func Convert_v1_EventList_To_jingx_EventList(in *EventList, out *jingx.EventList, s conversion.Scope) error {
	return autoConvert_v1_EventList_To_jingx_EventList(in, out, s)
}

func autoConvert_jingx_EventList_To_v1_EventList(in *jingx.EventList, out *EventList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Event)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_jingx_EventList_To_v1_EventList is an autogenerated conversion function.
func Convert_jingx_EventList_To_v1_EventList(in *jingx.EventList, out *EventList, s conversion.Scope) error {
	return autoConvert_jingx_EventList_To_v1_EventList(in, out, s)
}

func autoConvert_v1_EventSpec_To_jingx_EventSpec(in *EventSpec, out *jingx.EventSpec, s conversion.Scope) error {
	out.Author = in.Author
	out.GroupVersionKind = in.GroupVersionKind
	out.Verb = jingx.Verb(in.Verb)
	out.Raw = *(*[]byte)(unsafe.Pointer(&in.Raw))
	return nil
}

// Convert_v1_EventSpec_To_jingx_EventSpec is an autogenerated conversion function.
func Convert_v1_EventSpec_To_jingx_EventSpec(in *EventSpec, out *jingx.EventSpec, s conversion.Scope) error {
	return autoConvert_v1_EventSpec_To_jingx_EventSpec(in, out, s)
}

func autoConvert_jingx_EventSpec_To_v1_EventSpec(in *jingx.EventSpec, out *EventSpec, s conversion.Scope) error {
	out.Author = in.Author
	out.GroupVersionKind = in.GroupVersionKind
	out.Verb = Verb(in.Verb)
	out.Raw = *(*[]byte)(unsafe.Pointer(&in.Raw))
	return nil
}

// Convert_jingx_EventSpec_To_v1_EventSpec is an autogenerated conversion function.
func Convert_jingx_EventSpec_To_v1_EventSpec(in *jingx.EventSpec, out *EventSpec, s conversion.Scope) error {
	return autoConvert_jingx_EventSpec_To_v1_EventSpec(in, out, s)
}

func autoConvert_v1_GitReference_To_jingx_GitReference(in *GitReference, out *jingx.GitReference, s conversion.Scope) error {
	out.Git = in.Git
	out.Branch = in.Branch
	out.CommitHash = in.CommitHash
	return nil
}

// Convert_v1_GitReference_To_jingx_GitReference is an autogenerated conversion function.
func Convert_v1_GitReference_To_jingx_GitReference(in *GitReference, out *jingx.GitReference, s conversion.Scope) error {
	return autoConvert_v1_GitReference_To_jingx_GitReference(in, out, s)
}

func autoConvert_jingx_GitReference_To_v1_GitReference(in *jingx.GitReference, out *GitReference, s conversion.Scope) error {
	out.Git = in.Git
	out.Branch = in.Branch
	out.CommitHash = in.CommitHash
	return nil
}

// Convert_jingx_GitReference_To_v1_GitReference is an autogenerated conversion function.
func Convert_jingx_GitReference_To_v1_GitReference(in *jingx.GitReference, out *GitReference, s conversion.Scope) error {
	return autoConvert_jingx_GitReference_To_v1_GitReference(in, out, s)
}

func autoConvert_v1_Project_To_jingx_Project(in *Project, out *jingx.Project, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_ProjectSpec_To_jingx_ProjectSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Project_To_jingx_Project is an autogenerated conversion function.
func Convert_v1_Project_To_jingx_Project(in *Project, out *jingx.Project, s conversion.Scope) error {
	return autoConvert_v1_Project_To_jingx_Project(in, out, s)
}

func autoConvert_jingx_Project_To_v1_Project(in *jingx.Project, out *Project, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_jingx_ProjectSpec_To_v1_ProjectSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_jingx_Project_To_v1_Project is an autogenerated conversion function.
func Convert_jingx_Project_To_v1_Project(in *jingx.Project, out *Project, s conversion.Scope) error {
	return autoConvert_jingx_Project_To_v1_Project(in, out, s)
}

func autoConvert_v1_ProjectList_To_jingx_ProjectList(in *ProjectList, out *jingx.ProjectList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]jingx.Project)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_ProjectList_To_jingx_ProjectList is an autogenerated conversion function.
func Convert_v1_ProjectList_To_jingx_ProjectList(in *ProjectList, out *jingx.ProjectList, s conversion.Scope) error {
	return autoConvert_v1_ProjectList_To_jingx_ProjectList(in, out, s)
}

func autoConvert_jingx_ProjectList_To_v1_ProjectList(in *jingx.ProjectList, out *ProjectList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Project)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_jingx_ProjectList_To_v1_ProjectList is an autogenerated conversion function.
func Convert_jingx_ProjectList_To_v1_ProjectList(in *jingx.ProjectList, out *ProjectList, s conversion.Scope) error {
	return autoConvert_jingx_ProjectList_To_v1_ProjectList(in, out, s)
}

func autoConvert_v1_ProjectSpec_To_jingx_ProjectSpec(in *ProjectSpec, out *jingx.ProjectSpec, s conversion.Scope) error {
	out.GenerateId = in.GenerateId
	out.Domains = *(*[]string)(unsafe.Pointer(&in.Domains))
	return nil
}

// Convert_v1_ProjectSpec_To_jingx_ProjectSpec is an autogenerated conversion function.
func Convert_v1_ProjectSpec_To_jingx_ProjectSpec(in *ProjectSpec, out *jingx.ProjectSpec, s conversion.Scope) error {
	return autoConvert_v1_ProjectSpec_To_jingx_ProjectSpec(in, out, s)
}

func autoConvert_jingx_ProjectSpec_To_v1_ProjectSpec(in *jingx.ProjectSpec, out *ProjectSpec, s conversion.Scope) error {
	out.GenerateId = in.GenerateId
	out.Domains = *(*[]string)(unsafe.Pointer(&in.Domains))
	return nil
}

// Convert_jingx_ProjectSpec_To_v1_ProjectSpec is an autogenerated conversion function.
func Convert_jingx_ProjectSpec_To_v1_ProjectSpec(in *jingx.ProjectSpec, out *ProjectSpec, s conversion.Scope) error {
	return autoConvert_jingx_ProjectSpec_To_v1_ProjectSpec(in, out, s)
}

func autoConvert_v1_Repository_To_jingx_Repository(in *Repository, out *jingx.Repository, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_RepositorySpec_To_jingx_RepositorySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Repository_To_jingx_Repository is an autogenerated conversion function.
func Convert_v1_Repository_To_jingx_Repository(in *Repository, out *jingx.Repository, s conversion.Scope) error {
	return autoConvert_v1_Repository_To_jingx_Repository(in, out, s)
}

func autoConvert_jingx_Repository_To_v1_Repository(in *jingx.Repository, out *Repository, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_jingx_RepositorySpec_To_v1_RepositorySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_jingx_Repository_To_v1_Repository is an autogenerated conversion function.
func Convert_jingx_Repository_To_v1_Repository(in *jingx.Repository, out *Repository, s conversion.Scope) error {
	return autoConvert_jingx_Repository_To_v1_Repository(in, out, s)
}

func autoConvert_v1_RepositoryList_To_jingx_RepositoryList(in *RepositoryList, out *jingx.RepositoryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]jingx.Repository)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_RepositoryList_To_jingx_RepositoryList is an autogenerated conversion function.
func Convert_v1_RepositoryList_To_jingx_RepositoryList(in *RepositoryList, out *jingx.RepositoryList, s conversion.Scope) error {
	return autoConvert_v1_RepositoryList_To_jingx_RepositoryList(in, out, s)
}

func autoConvert_jingx_RepositoryList_To_v1_RepositoryList(in *jingx.RepositoryList, out *RepositoryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Repository)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_jingx_RepositoryList_To_v1_RepositoryList is an autogenerated conversion function.
func Convert_jingx_RepositoryList_To_v1_RepositoryList(in *jingx.RepositoryList, out *RepositoryList, s conversion.Scope) error {
	return autoConvert_jingx_RepositoryList_To_v1_RepositoryList(in, out, s)
}

func autoConvert_v1_RepositoryMeta_To_jingx_RepositoryMeta(in *RepositoryMeta, out *jingx.RepositoryMeta, s conversion.Scope) error {
	out.ProjectName = in.ProjectName
	out.RepositoryName = in.RepositoryName
	return nil
}

// Convert_v1_RepositoryMeta_To_jingx_RepositoryMeta is an autogenerated conversion function.
func Convert_v1_RepositoryMeta_To_jingx_RepositoryMeta(in *RepositoryMeta, out *jingx.RepositoryMeta, s conversion.Scope) error {
	return autoConvert_v1_RepositoryMeta_To_jingx_RepositoryMeta(in, out, s)
}

func autoConvert_jingx_RepositoryMeta_To_v1_RepositoryMeta(in *jingx.RepositoryMeta, out *RepositoryMeta, s conversion.Scope) error {
	out.ProjectName = in.ProjectName
	out.RepositoryName = in.RepositoryName
	return nil
}

// Convert_jingx_RepositoryMeta_To_v1_RepositoryMeta is an autogenerated conversion function.
func Convert_jingx_RepositoryMeta_To_v1_RepositoryMeta(in *jingx.RepositoryMeta, out *RepositoryMeta, s conversion.Scope) error {
	return autoConvert_jingx_RepositoryMeta_To_v1_RepositoryMeta(in, out, s)
}

func autoConvert_v1_RepositorySpec_To_jingx_RepositorySpec(in *RepositorySpec, out *jingx.RepositorySpec, s conversion.Scope) error {
	if err := Convert_v1_RepositoryMeta_To_jingx_RepositoryMeta(&in.RepositoryMeta, &out.RepositoryMeta, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_RepositorySpec_To_jingx_RepositorySpec is an autogenerated conversion function.
func Convert_v1_RepositorySpec_To_jingx_RepositorySpec(in *RepositorySpec, out *jingx.RepositorySpec, s conversion.Scope) error {
	return autoConvert_v1_RepositorySpec_To_jingx_RepositorySpec(in, out, s)
}

func autoConvert_jingx_RepositorySpec_To_v1_RepositorySpec(in *jingx.RepositorySpec, out *RepositorySpec, s conversion.Scope) error {
	if err := Convert_jingx_RepositoryMeta_To_v1_RepositoryMeta(&in.RepositoryMeta, &out.RepositoryMeta, s); err != nil {
		return err
	}
	return nil
}

// Convert_jingx_RepositorySpec_To_v1_RepositorySpec is an autogenerated conversion function.
func Convert_jingx_RepositorySpec_To_v1_RepositorySpec(in *jingx.RepositorySpec, out *RepositorySpec, s conversion.Scope) error {
	return autoConvert_jingx_RepositorySpec_To_v1_RepositorySpec(in, out, s)
}

func autoConvert_v1_Tag_To_jingx_Tag(in *Tag, out *jingx.Tag, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_TagSpec_To_jingx_TagSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Tag_To_jingx_Tag is an autogenerated conversion function.
func Convert_v1_Tag_To_jingx_Tag(in *Tag, out *jingx.Tag, s conversion.Scope) error {
	return autoConvert_v1_Tag_To_jingx_Tag(in, out, s)
}

func autoConvert_jingx_Tag_To_v1_Tag(in *jingx.Tag, out *Tag, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_jingx_TagSpec_To_v1_TagSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_jingx_Tag_To_v1_Tag is an autogenerated conversion function.
func Convert_jingx_Tag_To_v1_Tag(in *jingx.Tag, out *Tag, s conversion.Scope) error {
	return autoConvert_jingx_Tag_To_v1_Tag(in, out, s)
}

func autoConvert_v1_TagList_To_jingx_TagList(in *TagList, out *jingx.TagList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]jingx.Tag)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_TagList_To_jingx_TagList is an autogenerated conversion function.
func Convert_v1_TagList_To_jingx_TagList(in *TagList, out *jingx.TagList, s conversion.Scope) error {
	return autoConvert_v1_TagList_To_jingx_TagList(in, out, s)
}

func autoConvert_jingx_TagList_To_v1_TagList(in *jingx.TagList, out *TagList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Tag)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_jingx_TagList_To_v1_TagList is an autogenerated conversion function.
func Convert_jingx_TagList_To_v1_TagList(in *jingx.TagList, out *TagList, s conversion.Scope) error {
	return autoConvert_jingx_TagList_To_v1_TagList(in, out, s)
}

func autoConvert_v1_TagSpec_To_jingx_TagSpec(in *TagSpec, out *jingx.TagSpec, s conversion.Scope) error {
	if err := Convert_v1_RepositoryMeta_To_jingx_RepositoryMeta(&in.RepositoryMeta, &out.RepositoryMeta, s); err != nil {
		return err
	}
	out.Tag = in.Tag
	if err := Convert_v1_GitReference_To_jingx_GitReference(&in.GitReference, &out.GitReference, s); err != nil {
		return err
	}
	if err := Convert_v1_DockerImage_To_jingx_DockerImage(&in.DockerImage, &out.DockerImage, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_TagSpec_To_jingx_TagSpec is an autogenerated conversion function.
func Convert_v1_TagSpec_To_jingx_TagSpec(in *TagSpec, out *jingx.TagSpec, s conversion.Scope) error {
	return autoConvert_v1_TagSpec_To_jingx_TagSpec(in, out, s)
}

func autoConvert_jingx_TagSpec_To_v1_TagSpec(in *jingx.TagSpec, out *TagSpec, s conversion.Scope) error {
	if err := Convert_jingx_RepositoryMeta_To_v1_RepositoryMeta(&in.RepositoryMeta, &out.RepositoryMeta, s); err != nil {
		return err
	}
	out.Tag = in.Tag
	if err := Convert_jingx_GitReference_To_v1_GitReference(&in.GitReference, &out.GitReference, s); err != nil {
		return err
	}
	if err := Convert_jingx_DockerImage_To_v1_DockerImage(&in.DockerImage, &out.DockerImage, s); err != nil {
		return err
	}
	return nil
}

// Convert_jingx_TagSpec_To_v1_TagSpec is an autogenerated conversion function.
func Convert_jingx_TagSpec_To_v1_TagSpec(in *jingx.TagSpec, out *TagSpec, s conversion.Scope) error {
	return autoConvert_jingx_TagSpec_To_v1_TagSpec(in, out, s)
}
