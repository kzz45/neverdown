//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	unsafe "unsafe"

	audit "github.com/kzz45/neverdown/pkg/apis/audit"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Recorder)(nil), (*audit.Recorder)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Recorder_To_audit_Recorder(a.(*Recorder), b.(*audit.Recorder), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*audit.Recorder)(nil), (*Recorder)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_audit_Recorder_To_v1_Recorder(a.(*audit.Recorder), b.(*Recorder), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RecorderList)(nil), (*audit.RecorderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_RecorderList_To_audit_RecorderList(a.(*RecorderList), b.(*audit.RecorderList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*audit.RecorderList)(nil), (*RecorderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_audit_RecorderList_To_v1_RecorderList(a.(*audit.RecorderList), b.(*RecorderList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RecorderSpec)(nil), (*audit.RecorderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_RecorderSpec_To_audit_RecorderSpec(a.(*RecorderSpec), b.(*audit.RecorderSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*audit.RecorderSpec)(nil), (*RecorderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_audit_RecorderSpec_To_v1_RecorderSpec(a.(*audit.RecorderSpec), b.(*RecorderSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_Recorder_To_audit_Recorder(in *Recorder, out *audit.Recorder, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_RecorderSpec_To_audit_RecorderSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Recorder_To_audit_Recorder is an autogenerated conversion function.
func Convert_v1_Recorder_To_audit_Recorder(in *Recorder, out *audit.Recorder, s conversion.Scope) error {
	return autoConvert_v1_Recorder_To_audit_Recorder(in, out, s)
}

func autoConvert_audit_Recorder_To_v1_Recorder(in *audit.Recorder, out *Recorder, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_audit_RecorderSpec_To_v1_RecorderSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_audit_Recorder_To_v1_Recorder is an autogenerated conversion function.
func Convert_audit_Recorder_To_v1_Recorder(in *audit.Recorder, out *Recorder, s conversion.Scope) error {
	return autoConvert_audit_Recorder_To_v1_Recorder(in, out, s)
}

func autoConvert_v1_RecorderList_To_audit_RecorderList(in *RecorderList, out *audit.RecorderList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]audit.Recorder)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_RecorderList_To_audit_RecorderList is an autogenerated conversion function.
func Convert_v1_RecorderList_To_audit_RecorderList(in *RecorderList, out *audit.RecorderList, s conversion.Scope) error {
	return autoConvert_v1_RecorderList_To_audit_RecorderList(in, out, s)
}

func autoConvert_audit_RecorderList_To_v1_RecorderList(in *audit.RecorderList, out *RecorderList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Recorder)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_audit_RecorderList_To_v1_RecorderList is an autogenerated conversion function.
func Convert_audit_RecorderList_To_v1_RecorderList(in *audit.RecorderList, out *RecorderList, s conversion.Scope) error {
	return autoConvert_audit_RecorderList_To_v1_RecorderList(in, out, s)
}

func autoConvert_v1_RecorderSpec_To_audit_RecorderSpec(in *RecorderSpec, out *audit.RecorderSpec, s conversion.Scope) error {
	out.GroupVersionKind = in.GroupVersionKind
	out.Verb = in.Verb
	out.OriginalData = *(*[]byte)(unsafe.Pointer(&in.OriginalData))
	out.Data = *(*[]byte)(unsafe.Pointer(&in.Data))
	out.Author = in.Author
	return nil
}

// Convert_v1_RecorderSpec_To_audit_RecorderSpec is an autogenerated conversion function.
func Convert_v1_RecorderSpec_To_audit_RecorderSpec(in *RecorderSpec, out *audit.RecorderSpec, s conversion.Scope) error {
	return autoConvert_v1_RecorderSpec_To_audit_RecorderSpec(in, out, s)
}

func autoConvert_audit_RecorderSpec_To_v1_RecorderSpec(in *audit.RecorderSpec, out *RecorderSpec, s conversion.Scope) error {
	out.GroupVersionKind = in.GroupVersionKind
	out.Verb = in.Verb
	out.OriginalData = *(*[]byte)(unsafe.Pointer(&in.OriginalData))
	out.Data = *(*[]byte)(unsafe.Pointer(&in.Data))
	out.Author = in.Author
	return nil
}

// Convert_audit_RecorderSpec_To_v1_RecorderSpec is an autogenerated conversion function.
func Convert_audit_RecorderSpec_To_v1_RecorderSpec(in *audit.RecorderSpec, out *RecorderSpec, s conversion.Scope) error {
	return autoConvert_audit_RecorderSpec_To_v1_RecorderSpec(in, out, s)
}
