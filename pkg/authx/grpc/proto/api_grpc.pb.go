// Protocol for AuthxApi.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: pkg/authx/grpc/proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthxApi_KeepAlive_FullMethodName    = "/api.v1.AuthxApi/KeepAlive"
	AuthxApi_RegisterRule_FullMethodName = "/api.v1.AuthxApi/RegisterRule"
	AuthxApi_ClusterRole_FullMethodName  = "/api.v1.AuthxApi/ClusterRole"
	AuthxApi_ValidateRule_FullMethodName = "/api.v1.AuthxApi/ValidateRule"
)

// AuthxApiClient is the client API for AuthxApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthxApiClient interface {
	KeepAlive(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	RegisterRule(ctx context.Context, in *RegisterRuleRequest, opts ...grpc.CallOption) (*RegisterRuleReply, error)
	ClusterRole(ctx context.Context, in *ClusterRoleRequest, opts ...grpc.CallOption) (*ClusterRoleReply, error)
	ValidateRule(ctx context.Context, in *ValidateRuleRequest, opts ...grpc.CallOption) (*ValidateRuleReply, error)
}

type authxApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthxApiClient(cc grpc.ClientConnInterface) AuthxApiClient {
	return &authxApiClient{cc}
}

func (c *authxApiClient) KeepAlive(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, AuthxApi_KeepAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authxApiClient) RegisterRule(ctx context.Context, in *RegisterRuleRequest, opts ...grpc.CallOption) (*RegisterRuleReply, error) {
	out := new(RegisterRuleReply)
	err := c.cc.Invoke(ctx, AuthxApi_RegisterRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authxApiClient) ClusterRole(ctx context.Context, in *ClusterRoleRequest, opts ...grpc.CallOption) (*ClusterRoleReply, error) {
	out := new(ClusterRoleReply)
	err := c.cc.Invoke(ctx, AuthxApi_ClusterRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authxApiClient) ValidateRule(ctx context.Context, in *ValidateRuleRequest, opts ...grpc.CallOption) (*ValidateRuleReply, error) {
	out := new(ValidateRuleReply)
	err := c.cc.Invoke(ctx, AuthxApi_ValidateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthxApiServer is the server API for AuthxApi service.
// All implementations must embed UnimplementedAuthxApiServer
// for forward compatibility
type AuthxApiServer interface {
	KeepAlive(context.Context, *Ping) (*Pong, error)
	RegisterRule(context.Context, *RegisterRuleRequest) (*RegisterRuleReply, error)
	ClusterRole(context.Context, *ClusterRoleRequest) (*ClusterRoleReply, error)
	ValidateRule(context.Context, *ValidateRuleRequest) (*ValidateRuleReply, error)
	mustEmbedUnimplementedAuthxApiServer()
}

// UnimplementedAuthxApiServer must be embedded to have forward compatible implementations.
type UnimplementedAuthxApiServer struct {
}

func (UnimplementedAuthxApiServer) KeepAlive(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedAuthxApiServer) RegisterRule(context.Context, *RegisterRuleRequest) (*RegisterRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRule not implemented")
}
func (UnimplementedAuthxApiServer) ClusterRole(context.Context, *ClusterRoleRequest) (*ClusterRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterRole not implemented")
}
func (UnimplementedAuthxApiServer) ValidateRule(context.Context, *ValidateRuleRequest) (*ValidateRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRule not implemented")
}
func (UnimplementedAuthxApiServer) mustEmbedUnimplementedAuthxApiServer() {}

// UnsafeAuthxApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthxApiServer will
// result in compilation errors.
type UnsafeAuthxApiServer interface {
	mustEmbedUnimplementedAuthxApiServer()
}

func RegisterAuthxApiServer(s grpc.ServiceRegistrar, srv AuthxApiServer) {
	s.RegisterService(&AuthxApi_ServiceDesc, srv)
}

func _AuthxApi_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthxApiServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthxApi_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthxApiServer).KeepAlive(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthxApi_RegisterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthxApiServer).RegisterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthxApi_RegisterRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthxApiServer).RegisterRule(ctx, req.(*RegisterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthxApi_ClusterRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthxApiServer).ClusterRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthxApi_ClusterRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthxApiServer).ClusterRole(ctx, req.(*ClusterRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthxApi_ValidateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthxApiServer).ValidateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthxApi_ValidateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthxApiServer).ValidateRule(ctx, req.(*ValidateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthxApi_ServiceDesc is the grpc.ServiceDesc for AuthxApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthxApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.AuthxApi",
	HandlerType: (*AuthxApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _AuthxApi_KeepAlive_Handler,
		},
		{
			MethodName: "RegisterRule",
			Handler:    _AuthxApi_RegisterRule_Handler,
		},
		{
			MethodName: "ClusterRole",
			Handler:    _AuthxApi_ClusterRole_Handler,
		},
		{
			MethodName: "ValidateRule",
			Handler:    _AuthxApi_ValidateRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/authx/grpc/proto/api.proto",
}
