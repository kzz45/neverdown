/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kzz45/neverdown/pkg/apis/openx/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolcAccessControlLister helps list VolcAccessControls.
// All objects returned here must be treated as read-only.
type VolcAccessControlLister interface {
	// List lists all VolcAccessControls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VolcAccessControl, err error)
	// VolcAccessControls returns an object that can list and get VolcAccessControls.
	VolcAccessControls(namespace string) VolcAccessControlNamespaceLister
	VolcAccessControlListerExpansion
}

// volcAccessControlLister implements the VolcAccessControlLister interface.
type volcAccessControlLister struct {
	indexer cache.Indexer
}

// NewVolcAccessControlLister returns a new VolcAccessControlLister.
func NewVolcAccessControlLister(indexer cache.Indexer) VolcAccessControlLister {
	return &volcAccessControlLister{indexer: indexer}
}

// List lists all VolcAccessControls in the indexer.
func (s *volcAccessControlLister) List(selector labels.Selector) (ret []*v1.VolcAccessControl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolcAccessControl))
	})
	return ret, err
}

// VolcAccessControls returns an object that can list and get VolcAccessControls.
func (s *volcAccessControlLister) VolcAccessControls(namespace string) VolcAccessControlNamespaceLister {
	return volcAccessControlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolcAccessControlNamespaceLister helps list and get VolcAccessControls.
// All objects returned here must be treated as read-only.
type VolcAccessControlNamespaceLister interface {
	// List lists all VolcAccessControls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VolcAccessControl, err error)
	// Get retrieves the VolcAccessControl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.VolcAccessControl, error)
	VolcAccessControlNamespaceListerExpansion
}

// volcAccessControlNamespaceLister implements the VolcAccessControlNamespaceLister
// interface.
type volcAccessControlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolcAccessControls in the indexer for a given namespace.
func (s volcAccessControlNamespaceLister) List(selector labels.Selector) (ret []*v1.VolcAccessControl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolcAccessControl))
	})
	return ret, err
}

// Get retrieves the VolcAccessControl from the indexer for a given namespace and name.
func (s volcAccessControlNamespaceLister) Get(name string) (*v1.VolcAccessControl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("volcaccesscontrol"), name)
	}
	return obj.(*v1.VolcAccessControl), nil
}
