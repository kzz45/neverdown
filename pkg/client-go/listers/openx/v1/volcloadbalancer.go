/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kzz45/neverdown/pkg/apis/openx/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolcLoadBalancerLister helps list VolcLoadBalancers.
// All objects returned here must be treated as read-only.
type VolcLoadBalancerLister interface {
	// List lists all VolcLoadBalancers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VolcLoadBalancer, err error)
	// VolcLoadBalancers returns an object that can list and get VolcLoadBalancers.
	VolcLoadBalancers(namespace string) VolcLoadBalancerNamespaceLister
	VolcLoadBalancerListerExpansion
}

// volcLoadBalancerLister implements the VolcLoadBalancerLister interface.
type volcLoadBalancerLister struct {
	indexer cache.Indexer
}

// NewVolcLoadBalancerLister returns a new VolcLoadBalancerLister.
func NewVolcLoadBalancerLister(indexer cache.Indexer) VolcLoadBalancerLister {
	return &volcLoadBalancerLister{indexer: indexer}
}

// List lists all VolcLoadBalancers in the indexer.
func (s *volcLoadBalancerLister) List(selector labels.Selector) (ret []*v1.VolcLoadBalancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolcLoadBalancer))
	})
	return ret, err
}

// VolcLoadBalancers returns an object that can list and get VolcLoadBalancers.
func (s *volcLoadBalancerLister) VolcLoadBalancers(namespace string) VolcLoadBalancerNamespaceLister {
	return volcLoadBalancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolcLoadBalancerNamespaceLister helps list and get VolcLoadBalancers.
// All objects returned here must be treated as read-only.
type VolcLoadBalancerNamespaceLister interface {
	// List lists all VolcLoadBalancers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VolcLoadBalancer, err error)
	// Get retrieves the VolcLoadBalancer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.VolcLoadBalancer, error)
	VolcLoadBalancerNamespaceListerExpansion
}

// volcLoadBalancerNamespaceLister implements the VolcLoadBalancerNamespaceLister
// interface.
type volcLoadBalancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolcLoadBalancers in the indexer for a given namespace.
func (s volcLoadBalancerNamespaceLister) List(selector labels.Selector) (ret []*v1.VolcLoadBalancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolcLoadBalancer))
	})
	return ret, err
}

// Get retrieves the VolcLoadBalancer from the indexer for a given namespace and name.
func (s volcLoadBalancerNamespaceLister) Get(name string) (*v1.VolcLoadBalancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("volcloadbalancer"), name)
	}
	return obj.(*v1.VolcLoadBalancer), nil
}
