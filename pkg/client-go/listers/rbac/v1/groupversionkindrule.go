/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kzz45/neverdown/pkg/apis/rbac/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GroupVersionKindRuleLister helps list GroupVersionKindRules.
// All objects returned here must be treated as read-only.
type GroupVersionKindRuleLister interface {
	// List lists all GroupVersionKindRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GroupVersionKindRule, err error)
	// GroupVersionKindRules returns an object that can list and get GroupVersionKindRules.
	GroupVersionKindRules(namespace string) GroupVersionKindRuleNamespaceLister
	GroupVersionKindRuleListerExpansion
}

// groupVersionKindRuleLister implements the GroupVersionKindRuleLister interface.
type groupVersionKindRuleLister struct {
	indexer cache.Indexer
}

// NewGroupVersionKindRuleLister returns a new GroupVersionKindRuleLister.
func NewGroupVersionKindRuleLister(indexer cache.Indexer) GroupVersionKindRuleLister {
	return &groupVersionKindRuleLister{indexer: indexer}
}

// List lists all GroupVersionKindRules in the indexer.
func (s *groupVersionKindRuleLister) List(selector labels.Selector) (ret []*v1.GroupVersionKindRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GroupVersionKindRule))
	})
	return ret, err
}

// GroupVersionKindRules returns an object that can list and get GroupVersionKindRules.
func (s *groupVersionKindRuleLister) GroupVersionKindRules(namespace string) GroupVersionKindRuleNamespaceLister {
	return groupVersionKindRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GroupVersionKindRuleNamespaceLister helps list and get GroupVersionKindRules.
// All objects returned here must be treated as read-only.
type GroupVersionKindRuleNamespaceLister interface {
	// List lists all GroupVersionKindRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GroupVersionKindRule, err error)
	// Get retrieves the GroupVersionKindRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.GroupVersionKindRule, error)
	GroupVersionKindRuleNamespaceListerExpansion
}

// groupVersionKindRuleNamespaceLister implements the GroupVersionKindRuleNamespaceLister
// interface.
type groupVersionKindRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GroupVersionKindRules in the indexer for a given namespace.
func (s groupVersionKindRuleNamespaceLister) List(selector labels.Selector) (ret []*v1.GroupVersionKindRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GroupVersionKindRule))
	})
	return ret, err
}

// Get retrieves the GroupVersionKindRule from the indexer for a given namespace and name.
func (s groupVersionKindRuleNamespaceLister) Get(name string) (*v1.GroupVersionKindRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("groupversionkindrule"), name)
	}
	return obj.(*v1.GroupVersionKindRule), nil
}
