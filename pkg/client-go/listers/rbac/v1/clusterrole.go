/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kzz45/neverdown/pkg/apis/rbac/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterRoleLister helps list ClusterRoles.
// All objects returned here must be treated as read-only.
type ClusterRoleLister interface {
	// List lists all ClusterRoles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterRole, err error)
	// ClusterRoles returns an object that can list and get ClusterRoles.
	ClusterRoles(namespace string) ClusterRoleNamespaceLister
	ClusterRoleListerExpansion
}

// clusterRoleLister implements the ClusterRoleLister interface.
type clusterRoleLister struct {
	indexer cache.Indexer
}

// NewClusterRoleLister returns a new ClusterRoleLister.
func NewClusterRoleLister(indexer cache.Indexer) ClusterRoleLister {
	return &clusterRoleLister{indexer: indexer}
}

// List lists all ClusterRoles in the indexer.
func (s *clusterRoleLister) List(selector labels.Selector) (ret []*v1.ClusterRole, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterRole))
	})
	return ret, err
}

// ClusterRoles returns an object that can list and get ClusterRoles.
func (s *clusterRoleLister) ClusterRoles(namespace string) ClusterRoleNamespaceLister {
	return clusterRoleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterRoleNamespaceLister helps list and get ClusterRoles.
// All objects returned here must be treated as read-only.
type ClusterRoleNamespaceLister interface {
	// List lists all ClusterRoles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterRole, err error)
	// Get retrieves the ClusterRole from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ClusterRole, error)
	ClusterRoleNamespaceListerExpansion
}

// clusterRoleNamespaceLister implements the ClusterRoleNamespaceLister
// interface.
type clusterRoleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterRoles in the indexer for a given namespace.
func (s clusterRoleNamespaceLister) List(selector labels.Selector) (ret []*v1.ClusterRole, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterRole))
	})
	return ret, err
}

// Get retrieves the ClusterRole from the indexer for a given namespace and name.
func (s clusterRoleNamespaceLister) Get(name string) (*v1.ClusterRole, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clusterrole"), name)
	}
	return obj.(*v1.ClusterRole), nil
}
