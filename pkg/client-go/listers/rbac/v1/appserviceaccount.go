/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kzz45/neverdown/pkg/apis/rbac/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppServiceAccountLister helps list AppServiceAccounts.
// All objects returned here must be treated as read-only.
type AppServiceAccountLister interface {
	// List lists all AppServiceAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AppServiceAccount, err error)
	// AppServiceAccounts returns an object that can list and get AppServiceAccounts.
	AppServiceAccounts(namespace string) AppServiceAccountNamespaceLister
	AppServiceAccountListerExpansion
}

// appServiceAccountLister implements the AppServiceAccountLister interface.
type appServiceAccountLister struct {
	indexer cache.Indexer
}

// NewAppServiceAccountLister returns a new AppServiceAccountLister.
func NewAppServiceAccountLister(indexer cache.Indexer) AppServiceAccountLister {
	return &appServiceAccountLister{indexer: indexer}
}

// List lists all AppServiceAccounts in the indexer.
func (s *appServiceAccountLister) List(selector labels.Selector) (ret []*v1.AppServiceAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppServiceAccount))
	})
	return ret, err
}

// AppServiceAccounts returns an object that can list and get AppServiceAccounts.
func (s *appServiceAccountLister) AppServiceAccounts(namespace string) AppServiceAccountNamespaceLister {
	return appServiceAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppServiceAccountNamespaceLister helps list and get AppServiceAccounts.
// All objects returned here must be treated as read-only.
type AppServiceAccountNamespaceLister interface {
	// List lists all AppServiceAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AppServiceAccount, err error)
	// Get retrieves the AppServiceAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AppServiceAccount, error)
	AppServiceAccountNamespaceListerExpansion
}

// appServiceAccountNamespaceLister implements the AppServiceAccountNamespaceLister
// interface.
type appServiceAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppServiceAccounts in the indexer for a given namespace.
func (s appServiceAccountNamespaceLister) List(selector labels.Selector) (ret []*v1.AppServiceAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppServiceAccount))
	})
	return ret, err
}

// Get retrieves the AppServiceAccount from the indexer for a given namespace and name.
func (s appServiceAccountNamespaceLister) Get(name string) (*v1.AppServiceAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("appserviceaccount"), name)
	}
	return obj.(*v1.AppServiceAccount), nil
}
